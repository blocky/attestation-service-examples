# prepare iteration-call template for iteration 1 (bootstrap without previous attestations)
exec sed -e 's|PREV_ENCLAVE_ATTESTATION|null|' -e 's|PREV_TRANSITIVE_ATTESTATION|null|' ./iteration-call.json.template
cp stdout ./tmp/iteration-call.json

# perform initial attest-fn-call
stdin ./tmp/iteration-call.json
exec bky-as attest-fn-call
cp stdout tmp/prev.json

# check output
exec jq -r '.transitive_attested_function_call.claims.output | @base64d | fromjson' tmp/prev.json
cp stdout tmp/output.json
exec jq -e '.success == true' tmp/output.json
exec jq -e '.error == ""' tmp/output.json

# extract the attestations from iteration 1 response
exec jq -r '.enclave_attested_application_public_key.enclave_attestation' tmp/prev.json
cp stdout tmp/prev_ea
exec  jq -r '.transitive_attested_function_call.transitive_attestation' tmp/prev.json
cp stdout tmp/prev_ta

setEnvValueFromFile prev_ea ./tmp/prev_ea
setEnvValueFromFile prev_ta ./tmp/prev_ta

# prepare iteration-call template for iteration 2
exec sed -e 's|PREV_ENCLAVE_ATTESTATION|'"${prev_ea}"'|' -e 's|PREV_TRANSITIVE_ATTESTATION|'"${prev_ta}"'|' iteration-call.json.template
cp stdout ./tmp/iteration-call.json

# perform attest-fn-call for iteration 2
stdin ./tmp/iteration-call.json
exec bky-as attest-fn-call
cp stdout tmp/prev.json

# check output
exec jq -r '.transitive_attested_function_call.claims.output | @base64d | fromjson' tmp/prev.json
cp stdout tmp/output.json
exec jq -e '.success == true' tmp/output.json
exec jq -e '.error == ""' tmp/output.json

# extract the attestations from iteration 2 response
exec jq -r '.enclave_attested_application_public_key.enclave_attestation' tmp/prev.json
cp stdout tmp/prev_ea
exec  jq -r '.transitive_attested_function_call.transitive_attestation' tmp/prev.json
cp stdout tmp/prev_ta

setEnvValueFromFile prev_ea ./tmp/prev_ea
setEnvValueFromFile prev_ta ./tmp/prev_ta

# prepare iteration-call template for iteration 3
exec sed -e 's|PREV_ENCLAVE_ATTESTATION|'"${prev_ea}"'|' -e 's|PREV_TRANSITIVE_ATTESTATION|'"${prev_ta}"'|' iteration-call.json.template
cp stdout ./tmp/iteration-call.json

# perform attest-fn-call for iteration 3
stdin ./tmp/iteration-call.json
exec bky-as attest-fn-call
cp stdout tmp/prev.json

# check output
exec jq -r '.transitive_attested_function_call.claims.output | @base64d | fromjson' tmp/prev.json
cp stdout tmp/output.json
exec jq -e '.success == true' tmp/output.json
exec jq -e '.error == ""' tmp/output.json

# extract the attestations from iteration 3 response
exec jq -r '.enclave_attested_application_public_key.enclave_attestation' tmp/prev.json
cp stdout tmp/prev_ea
exec  jq -r '.transitive_attested_function_call.transitive_attestation' tmp/prev.json
cp stdout tmp/prev_ta

setEnvValueFromFile prev_ea ./tmp/prev_ea
setEnvValueFromFile prev_ta ./tmp/prev_ta

# prepare twap-call template for final calculation
exec sed -e 's|PREV_ENCLAVE_ATTESTATION|'"${prev_ea}"'|' -e 's|PREV_TRANSITIVE_ATTESTATION|'"${prev_ta}"'|' twap-call.json.template
cp stdout ./tmp/twap-call.json

# perform twap-call for final calculation
stdin ./tmp/twap-call.json
exec bky-as attest-fn-call
cp stdout tmp/twap.json

# check output
exec jq -r '.transitive_attested_function_call.claims.output | @base64d | fromjson' tmp/twap.json
cp stdout tmp/output.json
exec jq -e '.success == true' tmp/output.json
exec jq -e '.error == ""' tmp/output.json
exec jq -e '(.value|tostring|test("^[0-9]+(\\.[0-9]+)?$"))' tmp/output.json # verify the resulting TWAP price value is a reasonable price value
